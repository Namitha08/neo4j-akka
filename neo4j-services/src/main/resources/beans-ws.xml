<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:neo4j="http://www.springframework.org/schema/data/neo4j"
       xmlns:ehcache="http://ehcache-spring-annotations.googlecode.com/svn/schema/ehcache-spring"
       xmlns="http://www.springframework.org/schema/beans"

       xsi:schemaLocation="http://www.springframework.org/schema/beans
						   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
						   http://www.springframework.org/schema/context
						   http://www.springframework.org/schema/context/spring-context-3.0.xsd
						   http://www.springframework.org/schema/data/neo4j
		                   http://www.springframework.org/schema/data/neo4j/spring-neo4j.xsd
		                   http://ehcache-spring-annotations.googlecode.com/svn/schema/ehcache-spring
                           http://ehcache-spring-annotations.googlecode.com/svn/schema/ehcache-spring/ehcache-spring-1.1.xsd">

    <context:annotation-config/>
    <ehcache:annotation-driven cache-manager="ehCacheCacheManager"/>

    <context:component-scan base-package="com.campusconnect.neo4j.akka.facebook.worker"/>
    <import resource="beans-commons.xml"/>
    <neo4j:repositories base-package="com.campusconnect.neo4j.repositories"/>
    <neo4j:config base-package="com.campusconnect.neo4j.types" graphDatabaseService="graphDatabaseService"/>

    <bean class="com.campusconnect.neo4j.providers.Neo4jExceptionMapper" scope="singleton" id="exceptionMapper"/>

    <bean id="graphDatabaseService"
          class="org.springframework.data.neo4j.rest.SpringRestGraphDatabase" name="graphDatabaseService">
        <constructor-arg index="0" value="${neo4j.server.url}"/>
        <constructor-arg index="1" value="neo4j"/>
        <constructor-arg index="2" value="password123"/>
    </bean>

    <bean class="org.springframework.data.neo4j.support.Neo4jTemplate" id="neo4jTemplate" name="neo4jTemplate">
        <constructor-arg index="0" ref="graphDatabaseService"/>
    </bean>

    <bean class="com.campusconnect.neo4j.da.UserDaoImpl" id="userDao">
        <constructor-arg index="0" ref="neo4jTemplate"/>
    </bean>

    <bean class="com.campusconnect.neo4j.da.FavouriteDaoImpl" id="favouriteDao">
        <constructor-arg index="0" ref="neo4jTemplate"/>
    </bean>

    <bean class="com.campusconnect.neo4j.da.CollegeDao" id="collegeDao">
        <constructor-arg index="0" ref="neo4jTemplate"/>
    </bean>

    <bean class="com.campusconnect.neo4j.da.DepartmentDao" id="departmentDao">
        <constructor-arg index="0" ref="neo4jTemplate"/>
    </bean>

    <bean class="com.campusconnect.neo4j.resources.GroupResource" id="groupResource">
        <constructor-arg index="0" ref="groupDao"/>
        <constructor-arg index="1" ref="userDao"/>
    </bean>

    <bean class="com.campusconnect.neo4j.akka.facebook.api.GetUserProfile" id="getUserProfile">
        <constructor-arg index="0" ref="facebookClient"/>
        <constructor-arg index="1" ref="connectionFactory"/>
    </bean>

    <bean class="com.campusconnect.neo4j.da.GroupDao" id="groupDao">
        <constructor-arg index="0" ref="neo4jTemplate"/>
    </bean>
    <bean class="com.campusconnect.neo4j.da.ReminderDaoImpl" id="reminderDao">
        <constructor-arg index="0" ref="neo4jTemplate"/>
    </bean>

    <bean class="com.campusconnect.neo4j.akka.goodreads.GoodreadsAsynchHandler" id="goodreadsAsynchHandler">
        <property name="successListener" ref="grSuccessListener"/>
        <property name="saveBooksToDbRouter" ref="saveBookToDbRouter"/>
        <property name="getAndSaveBooksRouter" ref="getBooksRouter"/>
        <property name="addGoodreadsBookToUserRouter" ref="addBooksToUserRouter"/>
        <property name="userRecForWishListRouter" ref="userRecForWishlist"/>
        <property name="friendsBookSearchForWishListRouter" ref="friendsBookSearchForWishListWorker"/>
        <property name="getFriendsRouter" ref="getFriendsRouter"/>
        <property name="addGoodReadsFriendsRouter" ref="addGoodReadsFriends"/>
        <property name="replaceGRIdWithUserIdRouter" ref="replaceGRIdWithUserId"/>
    </bean>

    <bean id="goodreadsDao" class="com.campusconnect.neo4j.da.GoodreadsDao">
        <property name="getBook" ref="getBook"/>
        <property name="search" ref="search"/>
        <property name="goodreadsAsynchHandler" ref="goodreadsAsynchHandler"/>
    </bean>

    <bean class="com.campusconnect.neo4j.da.BookDaoImpl" id="bookDao">
        <constructor-arg index="0" ref="neo4jTemplate"/>
        <constructor-arg index="1" ref="goodreadsDao"/>
        <constructor-arg index="2" ref="goodreadsAsynchHandler"/>
        <constructor-arg index="3" ref="emailDao"/>
        <constructor-arg index="4" ref="userDao"/>
    </bean>

    <bean class="com.campusconnect.neo4j.da.UtilsDao" id="utilsDao"/>

    <bean class="com.campusconnect.neo4j.da.EmailDaoImpl" id="emailDao">
        <constructor-arg index="0" ref="neo4jAsynchHandler"/>
    </bean>

    <bean class="com.campusconnect.neo4j.akka.util.Neo4jAsynchHandler" id="neo4jAsynchHandler">
        <constructor-arg index="0" ref="borrowInitEmailRouter"/>
        <constructor-arg index="1" ref="utilSuccessListener"/>
        <constructor-arg index="2" ref="acceptToLendBookEmailRouter"/>
        <constructor-arg index="3" ref="friendrequestEmailRouter"/>
    </bean>

    <bean class="com.campusconnect.neo4j.resources.UserResource">
        <constructor-arg index="0" ref="userDao"/>
        <constructor-arg index="1" ref="bookDao"/>
        <constructor-arg index="2" ref="fbDao"/>
        <constructor-arg index="3" ref="goodreadsDao"/>
        <constructor-arg index="4" ref="addressDao"/>
        <constructor-arg index="5" ref="reminderDao"/>
        <constructor-arg index="6" ref="auditEventDao"/>
        <constructor-arg index="7" ref="notificationDao"/>
        <constructor-arg index="8" ref="groupDao"/>
    </bean>


    <bean class="com.campusconnect.neo4j.akka.goodreads.api.GetBook" id="getBook">
        <constructor-arg index="0" ref="goodReadsClient"/>
    </bean>

    <bean class="com.campusconnect.neo4j.akka.goodreads.api.GetBooks" id="getBooks">
        <constructor-arg index="0" ref="goodReadsClient"/>
    </bean>

    <bean class="com.campusconnect.neo4j.akka.goodreads.api.Search" id="search">
        <constructor-arg index="0" ref="goodReadsClient"/>
    </bean>

    <bean class="com.campusconnect.neo4j.akka.goodreads.client.GoodReadsClient" id="goodReadsClient">
        <constructor-arg index="0" value="${goodreads.client.url}"/>
        <constructor-arg index="1" value="${goodreads.client.key}"/>
    </bean>

    <bean class="com.campusconnect.neo4j.akka.goodreads.client.GoodreadsOauthClient" id="goodreadsOauthClient"
          init-method="init">
        <constructor-arg index="0" value="${goodreads.client.key}"/>
        <constructor-arg index="1" value="${goodreads.client.secret}"/>
    </bean>

    <bean class="com.campusconnect.neo4j.resources.BookResource">
        <constructor-arg index="0" ref="bookDao"/>
        <constructor-arg index="1" ref="userDao"/>
    </bean>

    <bean class="com.campusconnect.neo4j.resources.FavouriteResource">
        <constructor-arg index="0" ref="favouriteDao"/>

    </bean>

    <bean class="com.campusconnect.neo4j.akka.facebook.client.FacebookClient" id="facebookClient">
        <constructor-arg index="0" value="${fb.client.url}"/>
    </bean>

    <bean class="com.campusconnect.neo4j.akka.facebook.api.GetUserProfileImage" id="getUserProfileImage">
        <constructor-arg index="0" ref="facebookClient"/>
    </bean>

    <bean class="com.campusconnect.neo4j.da.FBDao" id="fbDao">
        <constructor-arg index="0" ref="connectionFactory"/>
        <constructor-arg index="1" ref="getFbFriendsRouter"/>
        <constructor-arg index="2" ref="successListener"/>
    </bean>

    <bean class="com.campusconnect.neo4j.akka.goodreads.api.GetUser" id="getUser">
        <constructor-arg index="0" ref="goodreadsOauthClient"/>

    </bean>

    <bean class="org.springframework.social.facebook.connect.FacebookConnectionFactory" id="connectionFactory">
        <constructor-arg value="${facebook.clientId}"/>
        <constructor-arg value="${facebook.clientSecret}"/>
    </bean>

    <bean id="actorSystem" class="com.github.sabomichal.akkaspringfactory.ActorSystemFactoryBean">
        <!-- actor system name -->
        <property name="name" value="MyActorSystem"/>
        <!-- actor system configuration -->
        <!--<property name="config">-->
        <!--<bean class="com.typesafe.config.ConfigFactory" factory-method="load">-->
        <!--<constructor-arg value="akkaActor.conf"/>-->
        <!--</bean>-->
        <!--</property>-->
    </bean>

    <bean id="getFbFriendsRouter" class="com.github.sabomichal.akkaspringfactory.ActorFactoryBean">
        <property name="actorSystem" ref="actorSystem"/>
        <property name="actorClass" value="com.campusconnect.neo4j.akka.facebook.worker.GetFriendsWorker"/>
        <property name="routerConfig">
            <bean class="akka.routing.SmallestMailboxPool">
                <constructor-arg type="int" value="${akka.friends.get.workers.count}"/>
            </bean>
        </property>
    </bean>

    <bean id="borrowInitEmailRouter" class="com.github.sabomichal.akkaspringfactory.ActorFactoryBean">
        <property name="actorSystem" ref="actorSystem"/>
        <property name="actorClass" value="com.campusconnect.neo4j.akka.util.worker.email.BorrowInitEmailWorker"/>
        <property name="routerConfig">
            <bean class="akka.routing.SmallestMailboxPool">
                <constructor-arg type="int" value="${akka.friends.get.workers.count}"/>
            </bean>
        </property>
    </bean>

    <bean id="acceptToLendBookEmailRouter" class="com.github.sabomichal.akkaspringfactory.ActorFactoryBean">
        <property name="actorSystem" ref="actorSystem"/>
        <property name="actorClass"
                  value="com.campusconnect.neo4j.akka.util.worker.email.AcceptedToLendBookEmailWorker"/>
        <property name="routerConfig">
            <bean class="akka.routing.SmallestMailboxPool">
                <constructor-arg type="int" value="${akka.friends.get.workers.count}"/>
            </bean>
        </property>
    </bean>

    <bean id="friendrequestEmailRouter" class="com.github.sabomichal.akkaspringfactory.ActorFactoryBean">
        <property name="actorSystem" ref="actorSystem"/>
        <property name="actorClass"
                  value="com.campusconnect.neo4j.akka.util.worker.email.FriendRequestEmailWorker"/>
        <property name="routerConfig">
            <bean class="akka.routing.SmallestMailboxPool">
                <constructor-arg type="int" value="${akka.friends.get.workers.count}"/>
            </bean>
        </property>
    </bean>

    <bean id="getFriendsRouter" class="com.github.sabomichal.akkaspringfactory.ActorFactoryBean">
        <property name="actorSystem" ref="actorSystem"/>
        <property name="actorClass" value="com.campusconnect.neo4j.akka.goodreads.worker.GetFriends"/>
        <property name="routerConfig">
            <bean class="akka.routing.SmallestMailboxPool">
                <constructor-arg index="0" type="int" value="${akka.friends.get.workers.count}"/>
            </bean>
        </property>
    </bean>

    <bean id="addGoodReadsFriends" class="com.github.sabomichal.akkaspringfactory.ActorFactoryBean">
        <property name="actorSystem" ref="actorSystem"/>
        <property name="actorClass"
                  value="com.campusconnect.neo4j.akka.goodreads.worker.AddFriendsFromGoodReadsWorker"/>
        <property name="routerConfig">
            <bean class="akka.routing.SmallestMailboxPool">
                <constructor-arg index="0" type="int" value="${akka.friends.get.workers.count}"/>
            </bean>
        </property>
    </bean>

    <bean id="addressDao" class="com.campusconnect.neo4j.da.AddressDaoImpl"/>
    <bean id="auditEventDao" class="com.campusconnect.neo4j.da.AuditEventDaoImpl"/>
    <bean id="notificationDao" class="com.campusconnect.neo4j.da.NotificationDaoImpl"/>
    <bean id="friendsBookSearchForWishListWorker" class="com.github.sabomichal.akkaspringfactory.ActorFactoryBean">
        <property name="actorSystem" ref="actorSystem"/>
        <property name="actorClass"
                  value="com.campusconnect.neo4j.akka.goodreads.worker.FriendsBookSearchForWishListWorker"/>
        <property name="routerConfig">
            <bean class="akka.routing.SmallestMailboxPool">
                <constructor-arg type="int" value="${akka.friends.get.workers.count}"/>
            </bean>
        </property>
    </bean>

    <bean id="addBooksToUserRouter" class="com.github.sabomichal.akkaspringfactory.ActorFactoryBean">
        <property name="actorSystem" ref="actorSystem"/>
        <property name="actorClass" value="com.campusconnect.neo4j.akka.goodreads.worker.AddGoodreadsBookToUserWorker"/>
        <property name="routerConfig">
            <bean class="akka.routing.SmallestMailboxPool">
                <constructor-arg type="int" value="${akka.friends.get.workers.count}"/>
            </bean>
        </property>
    </bean>

    <bean id="utilSuccessListener" class="com.github.sabomichal.akkaspringfactory.ActorFactoryBean">
        <property name="actorSystem" ref="actorSystem"/>
        <property name="actorClass" value="com.campusconnect.neo4j.akka.util.worker.email.SuccessListener"/>
    </bean>


    <bean id="saveBookToDbRouter" class="com.github.sabomichal.akkaspringfactory.ActorFactoryBean">
        <property name="actorSystem" ref="actorSystem"/>
        <property name="actorClass" value="com.campusconnect.neo4j.akka.goodreads.worker.SaveBooksToDbWorker"/>
        <property name="routerConfig">
            <bean class="akka.routing.SmallestMailboxPool">
                <constructor-arg type="int" value="${akka.save.book.workers.count}"/>
            </bean>
        </property>
    </bean>

    <bean id="replaceGRIdWithUserId" class="com.github.sabomichal.akkaspringfactory.ActorFactoryBean">
        <property name="actorSystem" ref="actorSystem"/>
        <property name="actorClass" value="com.campusconnect.neo4j.akka.goodreads.worker.ReplaceGRIdWithUserIdForRec"/>
        <property name="routerConfig">
            <bean class="akka.routing.SmallestMailboxPool">
                <constructor-arg type="int" value="5"/>
            </bean>
        </property>
    </bean>

    <bean id="userRecForWishlist" class="com.github.sabomichal.akkaspringfactory.ActorFactoryBean">
        <property name="actorSystem" ref="actorSystem"/>
        <property name="actorClass" value="com.campusconnect.neo4j.akka.goodreads.worker.UserRecForWishlist"/>
        <property name="routerConfig">
            <bean class="akka.routing.SmallestMailboxPool">
                <constructor-arg type="int" value="${akka.wishlist.friends.rec.count}"/>
            </bean>
        </property>
    </bean>

    <bean id="getBooksRouter" class="com.github.sabomichal.akkaspringfactory.ActorFactoryBean">
        <property name="actorSystem" ref="actorSystem"/>
        <property name="actorClass" value="com.campusconnect.neo4j.akka.goodreads.worker.GetBooksWorker"/>
        <property name="routerConfig">
            <bean class="akka.routing.SmallestMailboxPool">
                <constructor-arg type="int" value="${akka.get.books.workers.count}"/>
            </bean>
        </property>
    </bean>

    <bean id="successListener" class="com.github.sabomichal.akkaspringfactory.ActorFactoryBean">
        <property name="actorSystem" ref="actorSystem"/>
        <property name="actorClass" value="com.campusconnect.neo4j.akka.facebook.worker.SuccessListener"/>
    </bean>

    <bean id="grSuccessListener" class="com.github.sabomichal.akkaspringfactory.ActorFactoryBean">
        <property name="actorSystem" ref="actorSystem"/>
        <property name="actorClass" value="com.campusconnect.neo4j.akka.goodreads.worker.SuccessListener"/>
    </bean>


    <bean id="ehCacheCacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
        <property name="shared" value="true"/>
        <property name="cacheManagerName" value="neo4j"/>
    </bean>
    <!---->
    <!--<bean class="org.springframework.cache.ehcache.EhCacheCacheManager" id="cacheCacheManager">-->
    <!--<constructor-arg index="0" ref="ehCacheCacheManager" />-->
    <!--</bean>-->

</beans>